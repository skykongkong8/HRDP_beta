<?xml version="1.0" encoding="UTF-8"?>
<testsuite
  name="hrdp_sensors.flake8"
  tests="87"
  errors="0"
  failures="87"
  time="4.274"
>
  <testcase
    name="E302 (./src/camera/depth_filter_manager.py:3:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="expected 2 blank lines, found 1:&#10;class DepthFilterManager:&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/depth_filter_manager.py:8:56)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;    def apply_DepthFilter(self, depth_frame, filterType = None):&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/depth_filter_manager.py:8:58)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;    def apply_DepthFilter(self, depth_frame, filterType = None):&#10;"/>
  </testcase>
  <testcase
    name="E225 (./src/camera/depth_filter_manager.py:12:25)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="missing whitespace around operator:&#10;        if filterType =='decimation':&#10;"/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:31:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (147 &gt; 99 characters):&#10;            """&#10;            [ Spatial Filter ]&#10;            - aka Domain-Transformation Edge Preserving Smoothing&#10;            - 1D edge-preserving spatial filter using high-order domain transform&#10;            - linear time compute, not affected by the choice of params&#10;            - params = {&#10;                filter magnitude : #filter_iterations (1 ~ 5) default 2,&#10;                Smooth alpha : exponential moving average with (Alpha = 1 - no filter) ~ (Alpha = 0 - infinite filter) range(0.25 ~ 1) default 0.5,&#10;                Smooth delta : Step-size boundary = how much should I preserve edges (1 ~ 50) default 20,&#10;                Hole Filling : heuristic symmetric hole-filling (0 ~ 5) default 0&#10;            }&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:32:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (105 &gt; 99 characters):&#10;            """&#10;            [ Spatial Filter ]&#10;            - aka Domain-Transformation Edge Preserving Smoothing&#10;            - 1D edge-preserving spatial filter using high-order domain transform&#10;            - linear time compute, not affected by the choice of params&#10;            - params = {&#10;                filter magnitude : #filter_iterations (1 ~ 5) default 2,&#10;                Smooth alpha : exponential moving average with (Alpha = 1 - no filter) ~ (Alpha = 0 - infinite filter) range(0.25 ~ 1) default 0.5,&#10;                Smooth delta : Step-size boundary = how much should I preserve edges (1 ~ 50) default 20,&#10;                Hole Filling : heuristic symmetric hole-filling (0 ~ 5) default 0&#10;            }&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:42:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (126 &gt; 99 characters):&#10;            """&#10;            [ Temporal Filter ]&#10;            - improving depth data persistencyt6 by manipulating per-pixel values based on previous frames history (+updating)&#10;            - if missing/invalid : apply user-defined persistency mode&#10;            - great reliance to historic data -&gt; best suited for static scenes!&#10;            - params = {&#10;                Smooth alpha : exponential moving average with (Alpha = 1 - no filter) ~ (Alpha = 0 - infinite filter) range(0 ~ 1) default 0.4,&#10;                Smooth delta : Step-size boundary = how much should I preserve surfaces/edges (1 ~ 100) default 20,&#10;                Persistency Index : predefined rule that governs invalid data. Differ mode by mode (details in librealsense github) range(0 ~ 8) default 3&#10;            }&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:46:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (144 &gt; 99 characters):&#10;            """&#10;            [ Temporal Filter ]&#10;            - improving depth data persistencyt6 by manipulating per-pixel values based on previous frames history (+updating)&#10;            - if missing/invalid : apply user-defined persistency mode&#10;            - great reliance to historic data -&gt; best suited for static scenes!&#10;            - params = {&#10;                Smooth alpha : exponential moving average with (Alpha = 1 - no filter) ~ (Alpha = 0 - infinite filter) range(0 ~ 1) default 0.4,&#10;                Smooth delta : Step-size boundary = how much should I preserve surfaces/edges (1 ~ 100) default 20,&#10;                Persistency Index : predefined rule that governs invalid data. Differ mode by mode (details in librealsense github) range(0 ~ 8) default 3&#10;            }&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:47:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (115 &gt; 99 characters):&#10;            """&#10;            [ Temporal Filter ]&#10;            - improving depth data persistencyt6 by manipulating per-pixel values based on previous frames history (+updating)&#10;            - if missing/invalid : apply user-defined persistency mode&#10;            - great reliance to historic data -&gt; best suited for static scenes!&#10;            - params = {&#10;                Smooth alpha : exponential moving average with (Alpha = 1 - no filter) ~ (Alpha = 0 - infinite filter) range(0 ~ 1) default 0.4,&#10;                Smooth delta : Step-size boundary = how much should I preserve surfaces/edges (1 ~ 100) default 20,&#10;                Persistency Index : predefined rule that governs invalid data. Differ mode by mode (details in librealsense github) range(0 ~ 8) default 3&#10;            }&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:48:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (154 &gt; 99 characters):&#10;            """&#10;            [ Temporal Filter ]&#10;            - improving depth data persistencyt6 by manipulating per-pixel values based on previous frames history (+updating)&#10;            - if missing/invalid : apply user-defined persistency mode&#10;            - great reliance to historic data -&gt; best suited for static scenes!&#10;            - params = {&#10;                Smooth alpha : exponential moving average with (Alpha = 1 - no filter) ~ (Alpha = 0 - infinite filter) range(0 ~ 1) default 0.4,&#10;                Smooth delta : Step-size boundary = how much should I preserve surfaces/edges (1 ~ 100) default 20,&#10;                Persistency Index : predefined rule that governs invalid data. Differ mode by mode (details in librealsense github) range(0 ~ 8) default 3&#10;            }&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:60:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (116 &gt; 99 characters):&#10;            """&#10;            [ Hole Filling Filter ]&#10;            - Rectify missing data with N4-neighbors : select one of them under user-defined rule&#10;            - range(0 ~ 2) = {&#10;                0 : fill_from_left = use the value from the left neighbor,&#10;                1 : farest_from_around = use the value from the N4 which is FURTHEST away from the sensor, (default)&#10;                2 : nearest_from_around = use the value from the N4 which is CLOSEST away from the sensor&#10;            }&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:61:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (105 &gt; 99 characters):&#10;            """&#10;            [ Hole Filling Filter ]&#10;            - Rectify missing data with N4-neighbors : select one of them under user-defined rule&#10;            - range(0 ~ 2) = {&#10;                0 : fill_from_left = use the value from the left neighbor,&#10;                1 : farest_from_around = use the value from the N4 which is FURTHEST away from the sensor, (default)&#10;                2 : nearest_from_around = use the value from the N4 which is CLOSEST away from the sensor&#10;            }&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E711 (./src/camera/depth_filter_manager.py:67:23)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="comparison to None should be 'if cond is None:':&#10;        if filterType == None:&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/depth_filter_manager.py:70:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='blank line contains whitespace:&#10;            """&#10;            [ Applying with disparity transformation ]&#10;            &#10;            ** recall : disparity = difference beteween 2 stereo cams&#10;            """&#10;'/>
  </testcase>
  <testcase
    name="E303 (./src/camera/depth_filter_manager.py:85:5)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="too many blank lines (2):&#10;    def _decimation_filter(self, depth_frame):&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/depth_filter_manager.py:87:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;            &#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/depth_filter_manager.py:95:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="E501 (./src/camera/depth_filter_manager.py:98:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="line too long (126 &gt; 99 characters):&#10;        # spatial.set_option(rs.option.filter_smooth_delta, 40) # my tip: increasing alpha, delta increases the filter effect!&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/depth_filter_manager.py:99:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="E303 (./src/camera/depth_filter_manager.py:101:9)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="too many blank lines (2):&#10;        spatial_filtered_depth = spatial.process(depth_frame)&#10;"/>
  </testcase>
  <testcase
    name="W292 (./src/camera/depth_filter_manager.py:115:33)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="no newline at end of file:&#10;        return hole_filled_depth"/>
  </testcase>
  <testcase
    name="E302 (./src/camera/rgbd_camera.py:7:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="expected 2 blank lines, found 1:&#10;class RGBDRealsenseCamera:&#10;"/>
  </testcase>
  <testcase
    name="E501 (./src/camera/rgbd_camera.py:17:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="line too long (102 &gt; 99 characters):&#10;        config.enable_stream(rs.stream.color, resolution[0], resolution[1], rs.format.bgr8, framerate)&#10;"/>
  </testcase>
  <testcase
    name="E501 (./src/camera/rgbd_camera.py:18:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="line too long (101 &gt; 99 characters):&#10;        config.enable_stream(rs.stream.depth, resolution[0], resolution[1], rs.format.z16, framerate)&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgbd_camera.py:21:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="E225 (./src/camera/rgbd_camera.py:22:17)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="missing whitespace around operator:&#10;        align_to=rs.stream.color&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgbd_camera.py:37:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/rgbd_camera.py:38:57)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;    def apply_DepthFilter(self, depth_frame, filterType= None):&#10;"/>
  </testcase>
  <testcase
    name="E261 (./src/camera/rgbd_camera.py:56:58)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="at least two spaces before inline comment:&#10;        depth_frame = self.apply_DepthFilter(depth_frame) # if you block out this code, your can observe the effect of the filter&#10;"/>
  </testcase>
  <testcase
    name="E501 (./src/camera/rgbd_camera.py:56:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="line too long (129 &gt; 99 characters):&#10;        depth_frame = self.apply_DepthFilter(depth_frame) # if you block out this code, your can observe the effect of the filter&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgbd_camera.py:64:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="E303 (./src/camera/rgbd_camera.py:66:5)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="too many blank lines (2):&#10;    def release(self):&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgbd_camera.py:72:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/rgbd_camera.py:87:64)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;                        depth_img = cv2.resize(depth_img, dsize = (rgb_dim[1], rgb_dim[0]))&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/rgbd_camera.py:87:66)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;                        depth_img = cv2.resize(depth_img, dsize = (rgb_dim[1], rgb_dim[0]))&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/rgbd_camera.py:90:92)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;                    depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_img, alpha = 0.03), cv2.COLORMAP_JET) &#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/rgbd_camera.py:90:94)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;                    depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_img, alpha = 0.03), cv2.COLORMAP_JET) &#10;"/>
  </testcase>
  <testcase
    name="E501 (./src/camera/rgbd_camera.py:90:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="line too long (118 &gt; 99 characters):&#10;                    depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_img, alpha = 0.03), cv2.COLORMAP_JET) &#10;"/>
  </testcase>
  <testcase
    name="W291 (./src/camera/rgbd_camera.py:90:119)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="trailing whitespace:&#10;                    depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_img, alpha = 0.03), cv2.COLORMAP_JET) &#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgbd_camera.py:95:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;                    &#10;"/>
  </testcase>
  <testcase
    name="E303 (./src/camera/rgbd_camera.py:113:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='too many blank lines (3):&#10;if __name__ == "__main__":&#10;'/>
  </testcase>
  <testcase
    name="W292 (./src/camera/rgbd_camera.py:115:23)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="no newline at end of file:&#10;    rgbd.view_by_cv2()"/>
  </testcase>
  <testcase
    name="E302 (./src/camera/rgb_camera.py:6:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="expected 2 blank lines, found 1:&#10;class RGBRealsenseCamera:&#10;"/>
  </testcase>
  <testcase
    name="E501 (./src/camera/rgb_camera.py:21:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="line too long (102 &gt; 99 characters):&#10;        config.enable_stream(rs.stream.color, resolution[0], resolution[1], rs.format.bgr8, framerate)&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgb_camera.py:24:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="E225 (./src/camera/rgb_camera.py:25:17)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="missing whitespace around operator:&#10;        align_to=rs.stream.color&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgb_camera.py:40:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="E303 (./src/camera/rgb_camera.py:42:5)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="too many blank lines (2):&#10;    def get_frame_stream(self):&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgb_camera.py:56:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;        &#10;"/>
  </testcase>
  <testcase
    name="F841 (./src/camera/rgb_camera.py:66:21)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="local variable 'rgb_dim' is assigned to but never used:&#10;                    rgb_dim = rgb_img.shape&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/rgb_camera.py:68:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;                   &#10;"/>
  </testcase>
  <testcase
    name="E303 (./src/camera/rgb_camera.py:69:21)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='too many blank lines (2):&#10;                    cv2.namedWindow("RGBD Camera Experiment- RGB", cv2.WINDOW_AUTOSIZE)&#10;'/>
  </testcase>
  <testcase
    name="E303 (./src/camera/rgb_camera.py:86:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='too many blank lines (3):&#10;if __name__ == "__main__":&#10;'/>
  </testcase>
  <testcase
    name="W292 (./src/camera/rgb_camera.py:88:23)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="no newline at end of file:&#10;    rgbd.view_by_cv2()"/>
  </testcase>
  <testcase
    name="E501 (./src/camera/camera_constants.py:6:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (125 &gt; 99 characters):&#10;"""&#10;[ CAMERA CONSTANTS ]&#10;* This file includes all basic settings / hard-code needed information of Intel RealSense Camera connected to the DCCA Agent.&#10;Please add constants you need below whenever you code it. *&#10;&lt;CAMERA CONSTANTS&gt;&#10;- frame width&#10;- frame hieght&#10;- fps&#10;- device product line&#10;- whether rgb channel is possible or not&#10;"""&#10;'/>
  </testcase>
  <testcase
    name="E303 (./src/camera/camera_constants.py:18:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='too many blank lines (3):&#10;"""&#10;'/>
  </testcase>
  <testcase
    name="W291 (./src/camera/camera_constants.py:19:33)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='trailing whitespace:&#10;"""&#10;**RESOLUTION TUNING TRIAL LOG!** &#10;[WARNING] : this is only subjective assessment, so it might vary under your environment or purpose...&#10;[example DEVICE] : IntelRealsense D435 + NVDIA Jetson Nano&#10;HD : not working&#10;SVGA : not working&#10;WVGA : not working&#10;VGA : minimum latency, affordable!&#10;QVGA : not working&#10;240p : not working&#10;"""&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/camera_constants.py:20:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (101 &gt; 99 characters):&#10;"""&#10;**RESOLUTION TUNING TRIAL LOG!** &#10;[WARNING] : this is only subjective assessment, so it might vary under your environment or purpose...&#10;[example DEVICE] : IntelRealsense D435 + NVDIA Jetson Nano&#10;HD : not working&#10;SVGA : not working&#10;WVGA : not working&#10;VGA : minimum latency, affordable!&#10;QVGA : not working&#10;240p : not working&#10;"""&#10;'/>
  </testcase>
  <testcase
    name="E501 (./src/camera/camera_constants.py:55:100)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='line too long (101 &gt; 99 characters):&#10;"""&#10;**FRAME RATE TUNING TRIAL LOG!**&#10;[WARNING] : this is only subjective assessment, so it might vary under your environment or purpose...&#10;[example DEVICE] : IntelRealsense D435 + NVDIA Jetson Nano&#10;120 : not working&#10;100 : not working&#10;90 : not working&#10;60 : doable&#10;30 : not bad&#10;15 : least working&#10;"""&#10;'/>
  </testcase>
  <testcase
    name="E261 (./src/camera/camera_constants.py:64:16)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="at least two spaces before inline comment:&#10;FRAME_RATE = 30 # aka, FPS&#10;"/>
  </testcase>
  <testcase
    name="E302 (./src/camera/camera_constants.py:66:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="expected 2 blank lines, found 1:&#10;def device_checker():&#10;"/>
  </testcase>
  <testcase
    name="E302 (./src/camera/camera_constants.py:82:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="expected 2 blank lines, found 1:&#10;@dataclass&#10;"/>
  </testcase>
  <testcase
    name="W291 (./src/camera/camera_constants.py:95:20)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="trailing whitespace:&#10;    # - No Underbar &#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/camera_constants.py:98:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;    &#10;"/>
  </testcase>
  <testcase
    name="E203 (./src/camera/camera_constants.py:99:15)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="whitespace before ':':&#10;    FrameWidth : int = FRAME_WIDTH&#10;"/>
  </testcase>
  <testcase
    name="E203 (./src/camera/camera_constants.py:100:16)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="whitespace before ':':&#10;    FrameHeight : int = FRAME_HEIGHT&#10;"/>
  </testcase>
  <testcase
    name="E203 (./src/camera/camera_constants.py:101:14)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="whitespace before ':':&#10;    FrameRate : int = FRAME_RATE&#10;"/>
  </testcase>
  <testcase
    name="E261 (./src/camera/camera_constants.py:103:35)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="at least two spaces before inline comment:&#10;    device_info = device_checker() # this is not an intended attribute&#10;"/>
  </testcase>
  <testcase
    name="E203 (./src/camera/camera_constants.py:104:8)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="whitespace before ':':&#10;    RGB : bool = device_info[0]&#10;"/>
  </testcase>
  <testcase
    name="E203 (./src/camera/camera_constants.py:105:22)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="whitespace before ':':&#10;    DeviceProductLine : str = device_info[1]&#10;"/>
  </testcase>
  <testcase
    name="E303 (./src/camera/camera_constants.py:109:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="too many blank lines (3):&#10;###################&#10;"/>
  </testcase>
  <testcase
    name="E305 (./src/camera/camera_constants.py:113:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="expected 2 blank lines after class or function definition, found 3:&#10;N_CLUSTERS = 3&#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/camera_constants.py:114:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;    &#10;"/>
  </testcase>
  <testcase
    name="E302 (./src/camera/camera_publisher.py:7:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="expected 2 blank lines, found 1:&#10;class CameraPublisher(Node):&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:18:24)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;            reliability = rclpy.qos.Reliability.BEST_EFFORT,&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:18:26)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;            reliability = rclpy.qos.Reliability.BEST_EFFORT,&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:19:20)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;            history = rclpy.qos.HistoryPolicy.KEEP_LAST,&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:19:22)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;            history = rclpy.qos.HistoryPolicy.KEEP_LAST,&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:20:18)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;            depth = 1&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:20:20)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;            depth = 1&#10;"/>
  </testcase>
  <testcase
    name="W291 (./src/camera/camera_publisher.py:25:23)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="trailing whitespace:&#10;            qos_policy &#10;"/>
  </testcase>
  <testcase
    name="W293 (./src/camera/camera_publisher.py:34:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="blank line contains whitespace:&#10;    &#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:42:42)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;        rclpy.spin_once(self, timeout_sec = 0.1)&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:42:44)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;        rclpy.spin_once(self, timeout_sec = 0.1)&#10;"/>
  </testcase>
  <testcase
    name="E305 (./src/camera/camera_publisher.py:47:1)"
    classname="hrdp_sensors.flake8"
  >
      <failure message='expected 2 blank lines after class or function definition, found 1:&#10;if __name__ == "__main__":&#10;'/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:48:20)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;    rclpy.init(args = None)&#10;"/>
  </testcase>
  <testcase
    name="E251 (./src/camera/camera_publisher.py:48:22)"
    classname="hrdp_sensors.flake8"
  >
      <failure message="unexpected spaces around keyword / parameter equals:&#10;    rclpy.init(args = None)&#10;"/>
  </testcase>
  <system-out>Checked files:
* ./src/camera/depth_filter_manager.py
* ./src/camera/rgbd_camera.py
* ./src/camera/rgb_camera.py
* ./src/camera/camera_constants.py
* ./src/camera/camera_publisher.py
* ./src/lidar/__init__.py</system-out>
</testsuite>
